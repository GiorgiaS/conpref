# In this file are listed the coordinates of the user's path

# First Path:
# From Ormond College Main Building: -37.7929674351799, 144.96085799574823
# To the Melbourne University Karate Club: -37.79630571253631, 144.96156696835794
# Time: 9 minutes by walking
# 18 coordinates
# Average time between computations: 9*60/18 = 30 seconds
# Meters 750m
# -37.7929674351799, 144.96085799574823
# -37.79294200042407, 144.96098674177614
# -37.79277529354474, 144.96124619670644
# -37.792414966083605, 144.96137494273438
# -37.79208691435458, 144.9613761680535
# -37.79210190377737, 144.96196497617467 (Entering in Morrison Cl)
# -37.79241146502823, 144.96198965814744 (Close to Uniting Church Centre for Theology e Ministry)
# -37.79261643453635, 144.96195582624955
# -37.79291586723046, 144.9619107170523
# -37.79347828961609, 144.9618714766853 (Close to Erni Cropley Sperts Pavilion)
# -37.793779264825524, 144.96245746171573
# -37.79420741052974, 144.96283833538166
# -37.79447447045508, 144.9626505807576 (Inside the park)
# -37.79495771929464, 144.9624681905514
# -37.79552574461845, 144.96240381753938
# -37.79593268542908, 144.96198539294866
# -37.79592844647386, 144.9616045192828
# -37.79630571253631, 144.96156696835794

# (First) Path:
# From the Melbourne University Karate Club: -37.79630571253631, 144.96156696835794
# To the School of Chemistry: -37.79788359534891, 144.96214718973644
# Time: 3 minutes by walking
# Meters: 210m
# Number of coordinates 7
# Average time between computations: 3*60/7 = 25 seconds
# -37.79630571253631, 144.96156696835794
# -37.79634487925153, 144.9619513884869
# -37.79639998533984, 144.96235908423935
# -37.796853549274395, 144.96233762656817
# -37.797368574104084, 144.9622813001813
# -37.797457590377384, 144.96215255415422
# -37.79788359534891, 144.96214718973644

# Second Path:
# From the Lytton St/Lygon St 113: -37.794129757746155, 144.9680227939311
# To the Queensberry St/Swanston St: -37.805265914024076, 144.9631387255518
# Km: 1.6km
# Time: 8 minutes by tram (21min on foot)
# Number of coordinates:
# Average time between computations 21*60/19 = 66 seconds (25 by tram)
# -37.794129757746155, 144.9680227939311
# -37.79462599850022, 144.96794664965122
# -37.795093598738994, 144.9678707853271
# -37.79593287379557, 144.9677494024085
# -37.79650837118094, 144.9676583652195
# -37.79713182162259, 144.96755215516572
# -37.79707187469338, 144.96682385765394
# -37.79702391711498, 144.966110733007
# -37.79683208649007, 144.9645934465242
# -37.79761522684175, 144.96449361947288
# -37.798199966695165, 144.96437879020408
# -37.799056904669825, 144.96422568451234
# -37.800155787054166, 144.96404706120535
# -37.8008009947818, 144.9639705083595
# -37.80200066291815, 144.9636770557837
# -37.80294828621657, 144.96354946761963
# -37.803865654579596, 144.96337084431264
# -37.80431929406503, 144.96335808550498
# -37.805265914024076, 144.9631387255518

# Fourth path:
# From the Melbourne State Library Forecourt: -37.810360761457865, 144.9642516444488
# To Tipo 00 restaurant: -37.81355777849804, 144.96200756713782
# Time: 7 minutes (on foot)
# Number of coordinates: 14
# Meters: 550m
# Average time between computations: 7*60/14 = 30seconds
# -37.810360761457865, 144.9642516444488
# -37.81056779747036, 144.96433520177473
# -37.81070322234998, 144.96392019716285
# -37.81082795557197, 144.9635097034707
# -37.81095268858327, 144.96304507874223
# -37.8110774213893, 144.96261203040564
# -37.81129124855719, 144.96186321773638
# -37.81170464599256, 144.96194892521058
# -37.81220357086726, 144.96213387290044
# -37.81258845345318, 144.9623233315276
# -37.81296620663282, 144.96249925739568
# -37.81327268420746, 144.9626345849865
# -37.81338672205001, 144.96223311313372
# -37.81355777849804, 144.96200756713782
# -37.813576162264184, 144.961990797219

# From: Melbourne University/Pelham St: -37.802036799354106, 144.9602039016586
# To: Queensberry St/Swanston St: -37.80581516911629, 144.96300401120763
# Meters: 700m
# Number of coordinates: 15
# -37.802036799354106, 144.9602039016586
# -37.80209123424761, 144.9606044918742
# -37.80262230186029, 144.96051427348016
# -37.80305000454411, 144.96045112060435
# -37.803402857393706, 144.96035188037087
# -37.80377709342237, 144.96030226025417
# -37.80392678730287, 144.96031579301328
# -37.804283200082864, 144.9602075309404
# -37.80438299536365, 144.96093829996718
# -37.80444358528333, 144.96156080688604
# -37.80451146311605, 144.96228962746608
# -37.80461635965249, 144.96318861977187
# -37.80496101862521, 144.96308240971808
# -37.805494487602694, 144.9630368911236
# -37.80581516911629, 144.96300401120763


import math
# from geographiclib.geodesic import Geodesic
#  import numpy as np
from pygeodesy.sphericalNvector import LatLon


class UserPath:
    # 900m
    # It is inside the College and the University Areas
    firstPath = [[-37.7929674351799, 144.96085799574823],
                 [-37.792574432083974, 144.96137685780494],
                 [-37.792082835504246, 144.96139203066977],
                 [-37.79209482570364, 144.9619837723981],
                 [-37.79353363550493, 144.96186238947945],
                 [-37.79433096386983, 144.96283345285417],
                 [-37.795589885874854, 144.96240102620655],
                 [-37.79642915529341, 144.96254516842242],
                 [-37.79760542147318, 144.962123706944]]

    # It is in CDB
    secondPath = [[-37.794129757746155, 144.9680227939311],
                  [-37.79462599850022, 144.96794664965122],
                  [-37.795093598738994, 144.9678707853271],
                  [-37.79593287379557, 144.9677494024085],
                  [-37.79650837118094, 144.9676583652195],
                  [-37.79713182162259, 144.96755215516572],
                  [-37.79707187469338, 144.96682385765394],
                  [-37.79702391711498, 144.966110733007],
                  [-37.79683208649007, 144.9645934465242],
                  [-37.79761522684175, 144.96449361947288],
                  [-37.798199966695165, 144.96437879020408],
                  [-37.799056904669825, 144.96422568451234],
                  [-37.800155787054166, 144.96404706120535],
                  [-37.8008009947818, 144.9639705083595],
                  [-37.80200066291815, 144.9636770557837],
                  [-37.80294828621657, 144.96354946761963],
                  [-37.803865654579596, 144.96337084431264],
                  [-37.80431929406503, 144.96335808550498],
                  [-37.805265914024076, 144.9631387255518]]

    thirdPath = [[-37.810360761457865, 144.9642516444488],
                 [-37.81056846294626, 144.96432900038826],
                 [-37.811316898671635, 144.96175491085086],
                 [-37.81329171330676, 144.96263712047667],
                 [-37.81346546941555, 144.96200680138458],
                 [-37.8135572108636, 144.9620527948823]]

    fourthPath = [[-37.802036799354106, 144.9602039016586],
                  [-37.80209123424761, 144.9606044918742],
                  [-37.80262230186029, 144.96051427348016],
                  [-37.80305000454411, 144.96045112060435],
                  [-37.803402857393706, 144.96035188037087],
                  [-37.80377709342237, 144.96030226025417],
                  [-37.80392678730287, 144.96031579301328],
                  [-37.804283200082864, 144.9602075309404],
                  [-37.80438299536365, 144.96093829996718],
                  [-37.80444358528333, 144.96156080688604],
                  [-37.80451146311605, 144.96228962746608],
                  [-37.80461635965249, 144.96318861977187],
                  [-37.80496101862521, 144.96308240971808],
                  [-37.805494487602694, 144.9630368911236],
                  [-37.80581516911629, 144.96300401120763],
                  ]
    # getters

    def getFirstPath(self):
        return self.firstPath

    def getSecondPath(self):
        return self.secondPath

    def getThirdPath(self):
        return self.thirdPath

    def getFourthPath(self):
        return self.fourthPath

    # https://developpaper.com/example-of-python-calculating-azimuth-angle-based-on-the-coordinates-of-two-points/
    # def azimuthAngle(self, x1, y1, x2, y2):
        # dx = x2 - x1
        # dy = y2 - y1
        # if x2 == x1:
        #     angle = math.pi / 2.0
        #     if y2 == y1:
        #         angle = 0.0
        #     elif y2 < y1:
        #         angle = 3.0 * math.pi / 2.0
        # elif x2 > x1 and y2 > y1:
        #     angle = math.atan(dx / dy)
        # elif x2 > x1 and y2 < y1:
        #     angle = math.pi / 2 + math.atan(-dy / dx)
        # elif x2 < x1 and y2 < y1:
        #     angle = math.pi + math.atan(dx / dy)
        # elif x2 < x1 and y2 > y1:
        #     angle = 3.0 * math.pi / 2.0 + math.atan(dy / -dx)
        # return (angle * 180 / math.pi)

    def get_bearing(self, lat1, lon1, lat2, lon2):
        dLon = lon2 - lon1
        y = math.sin(dLon) * math.cos(lat2)
        x = math.cos(lat1)*math.sin(lat2) - math.sin(lat1) * \
            math.cos(lat2)*math.cos(dLon)
        brng = np.rad2deg(math.atan2(y, x))
        if brng < 0:
            brng += 360
        return brng

# https://stackoverflow.com/questions/20923884/find-equidistant-points-between-two-coordinates
    def generatesCoordinates(self, path, pathName):
        ntot = 0
        file = open("./userPath_%s.txt" %(pathName), "w")
        for k in range(len(path)-1):
            j = k+1
            n = 0

            p1 = path[k]
            p2 = path[j]

            # print("Corrdinate 1: ", p1[0], " ", p1[1])
            # print("Corrdinate 2: ", p2[0], " ", p2[1])
            x1 = p1[0]
            y1 = p1[1]

            x2 = p2[0]
            y2 = p2[1]

            shift = 0.00025  # 22 meters more or less

            d_full = ((x2 - x1)**2 + (y2 - y1)**2)**0.5
            s = shift / d_full

            points = []
            # start at s so we don't duplicate (x1, y1)
            a = s
            file.write(str(x1) +  " " + str(y1) + "\n")
            while a < 1:
                x = (1 - a) * x1 + a * x2
                y = (1 - a) * y1 + a * y2
                points.append((x, y))
                a += s
                print("Between", p1, "and", p2)
                print("New Coordinates: ", x, y, "\n")
                file.write(str(x) + " " + str(y) + "\n")
                n += 1
                ntot += 1
            print("Coordinates for ", p1, p2, ":", n)
            print("userPath::generatesCoordinates - k: ", k, "/", (len(path)-1))
            # Include also the last coordinate
            if (k == (len(path)-2)):
                print("userPath::generatesCoordinates - last k: ", k)
                file.write(str(x2) + " " + str(y2) + "\n")
                n += 1
                ntot += 1
        print("Total coordinates: ", ntot)
        file.close()



# filePath = open("./userPath_first.txt", "r")
#         firstPath = []
#         for line in filePath:
#             point = line
#             pl = list(map(float,point.split()))
#             firstPath.append(pl)   
#         print(firstPath)

